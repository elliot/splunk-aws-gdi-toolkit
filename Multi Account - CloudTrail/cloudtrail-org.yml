---
AWSTemplateFormatVersion: 2010-09-09
Description: This is a CloudFormation template to create CloudTrail logging infrastructure for an AWS Organization to S3 then Splunk over HEC via Firehose - https://aws.amazon.com/cloudtrail/


Parameters:
  service:
    Type: String
    Description: service name
    Default: splunk-aws-gdi-tooklit

  stage:
    Type: String
    Description: Used to distinguish between stages of an environment
    Default: dev

  contact:
    Description: Used to identify a contact for the resources created in this stack.  As an example, this could be an email address or username.
    Type: String

  splunkHECEndpoint:
    Type: String
    Description: Destination (URL) that Firehose will send data to.  This should be the event endpoint.

  splunkHECToken:
    Type: String
    Description: HEC token Firehose will use to authenticate data being sent to Splunk.

  lambdaProcessorMemorySize:
    Type: String
    Description: Size of memory to allocate to Lambda processor.  The higher this number the more memory is allocated and the more expensive the function is to run, but the fater it runs.
    Default: 1024

  lambdaProcessorTimeout:
    Type: String
    Description: How long the Lambda function can run until it times out.
    Default: 600

  lambdaProcessorBatchSize:
    Type: String
    Description: How many SQS messages (aka CloudTrail files) to process in a single Lambda execution.
    Default: 100

  lambdaProcessorBatchingWindowInSeconds:
    Type: String
    Description: How long to let SQS messages (aka CloudTrail files) queue up before processing them.
    Default: 300


Resources:
  # CloudTrail > S3 resources
  cloudTrailOrgS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketEncryption: 
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Sub "${AWS::AccountId}-cloudtrail-org-bucket"
      LifecycleConfiguration:
        Rules:
            - Id: !Sub "${AWS::AccountId}-cloudtrail-org-bucket-cleanup"
              AbortIncompleteMultipartUpload:
                DaysAfterInitiation: 1
              Status: Enabled
      NotificationConfiguration:
        QueueConfigurations:
          - Event: "s3:ObjectCreated:*"
            Queue: !GetAtt cloudTrailOrgS3BucketNotificationSQSQueue.Arn
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
      - Key: service
        Value: !Ref service
      - Key: stage
        Value: !Ref stage
      - Key: contact
        Value: !Ref contact

  cloudTrailOrgS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref cloudTrailOrgS3Bucket
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
            - s3:GetBucketAcl
          Principal: 
            Service: cloudtrail.amazonaws.com
          Resource: !Sub "arn:aws:s3:::${AWS::AccountId}-cloudtrail-org-bucket"
        - Effect: Allow
          Action:
            - s3:PutObject
          Principal: 
            Service: cloudtrail.amazonaws.com
          Resource: !Sub "arn:aws:s3:::${AWS::AccountId}-cloudtrail-org-bucket/AWSLogs/*"

  # S3 notification > SQS resources
  cloudTrailOrgS3BucketNotificationSQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${AWS::AccountId}-cloudtrail-org-sqs-queue"
      Tags:
      - Key: service
        Value: !Ref service
      - Key: stage
        Value: !Ref stage
      - Key: contact
        Value: !Ref contact
      VisibilityTimeout: 900

  cloudTrailOrgS3BucketNotificationSQSQueuePolicy: 
    Type: AWS::SQS::QueuePolicy
    Properties: 
      PolicyDocument:
        Version: 2012-10-17
        Id: !Sub "${AWS::AccountId}-cloudtrail-org-sqs-queuePolicy"
        Statement:
        -
          Sid: Send messages to SQS
          Effect: Allow
          Principal:
            AWS: "*"
          Action:
            - "SQS:SendMessage"
          Resource: "*"
          Condition:
            ArnLike: 
              "aws:SourceARN": !GetAtt cloudTrailOrgS3Bucket.Arn
      Queues:
        - !Ref "cloudTrailOrgS3BucketNotificationSQSQueue"

  # Firehose > Splunk resources
  cloudTraiLOrgFirehose:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties: 
      DeliveryStreamName: !Sub "${AWS::AccountId}-cloudtrail-org-firehose"
      DeliveryStreamType: DirectPut
      SplunkDestinationConfiguration:
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName: !Ref cloudTrailOrgFirehoseLogGroup
          LogStreamName: "SplunkDelivery"
        HECAcknowledgmentTimeoutInSeconds: 300
        HECEndpoint: !Ref splunkHECEndpoint
        HECEndpointType: "Raw"
        HECToken: !Ref splunkHECToken
        RetryOptions:
          DurationInSeconds: 15
        S3BackupMode: "FailedEventsOnly"
        S3Configuration:
          BucketARN: !Sub "arn:aws:s3:::${AWS::AccountId}-cloudtrail-org-firehose-backsplash-bucket"
          BufferingHints:
            IntervalInSeconds: 300
            SizeInMBs: 5
          CompressionFormat: "UNCOMPRESSED"
          Prefix: !Sub "$${AWS::AccountId}-cloudtrail-org-firehose"
          RoleARN: !GetAtt cloudTrailOrgFirehoseIAMRole.Arn

  cloudTrailOrgFirehoseIAMPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:Describe*
          - logs:PutLogEvents
          Resource: !GetAtt cloudTrailOrgFirehoseLogGroup.Arn
        - Effect: Allow
          Action:
          - s3:PutObject
          Resource: !Sub "arn:aws:s3:::${AWS::AccountId}-cloudtrail-org-firehose-backsplash-bucket/*"
      ManagedPolicyName: !Sub "${AWS::AccountId}-cloudtrail-org-firehose-iam-policy"

  cloudTrailOrgFirehoseIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: "Allow"
          Principal:
            Service: "firehose.amazonaws.com"
          Action:
            - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref cloudTrailOrgFirehoseIAMPolicy
      RoleName: !Sub "${AWS::AccountId}-cloudtrail-org-firehose-iam-role"
      Tags:
      - Key: service
        Value: !Ref service
      - Key: stage
        Value: !Ref stage
      - Key: contact
        Value: !Ref contact

  cloudTrailOrgFirehoseBacksplashBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::AccountId}-cloudtrail-org-firehose-backsplash-bucket"
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
            - Id: !Sub "${AWS::AccountId}-cloudtrail-org-firehose-backsplash-bucket-cleanup"
              AbortIncompleteMultipartUpload:
                DaysAfterInitiation: 1
              Status: Enabled
      Tags:
      - Key: service
        Value: !Ref service
      - Key: stage
        Value: !Ref stage
      - Key: contact
        Value: !Ref contact

  cloudTrailOrgFirehoseLogGroup: 
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub "/aws/kinesisfirehose/${AWS::AccountId}-cloudtrail-org-firehose"
      RetentionInDays: 30

  cloudTrailOrgFirehoseLogStream:
    Type: AWS::Logs::LogStream
    Properties: 
      LogGroupName: !Ref cloudTrailOrgFirehoseLogGroup
      LogStreamName: "SplunkDelivery"

  # Lambda resources
  cloudTrailOrgLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Architectures:
        - arm64
      Code:
        ZipFile: |
          import boto3, gzip, json, os

          s3Client = boto3.client('s3')
          firehoseDeliverySreamName = os.environ['firehoseDeliverySreamName']
          firehoseClient = boto3.client('firehose', region_name=os.environ['AWS_REGION'])

          def handler(event, context):
            for record in event['Records']:
            
              # Log record
              print("Processing record: ", record)

              # Set bucket and key to retrieve
              record = json.loads(record['body'])
              bucket = record['Records'][0]['s3']['bucket']['name']
              key = record['Records'][0]['s3']['object']['key']

              # Exclude Digest files from processing
              if ("CloudTrail-Digest" in key):
                print("Skipping digest file " + key + " in bucket " + bucket)
                pass

              else:

                # Log bucket and key
                print("Processing file " + key + " in bucket " + bucket)

                # Download CloudTrail file from S3
                s3Client.download_file(bucket, key, '/tmp/cloudtrail.gz')

                # Unzip CloudTrail file
                with gzip.open("/tmp/cloudtrail.gz", "rb") as f:
                 data = f.read().decode("ascii")

                # Parse and send data to Splunk
                cloudTrailRecords = json.loads(data)["Records"]
                for cloudTrailRecord in cloudTrailRecords:
                  firehoseClient.put_record(DeliveryStreamName=firehoseDeliverySreamName, Record={"Data": json.dumps(cloudTrailRecord) + "\r\n"})
      Description: Lambda function for processing SQS messages that contain information for CloudTrail files, and sending them to Firehose.
      Environment:
        Variables:
          firehoseDeliverySreamName: !Ref cloudTraiLOrgFirehose
      FunctionName: !Sub "${AWS::AccountId}-cloudtrail-org-lambda-function"
      Handler: index.handler
      MemorySize: !Ref lambdaProcessorMemorySize
      Role: !GetAtt cloudTrailOrgLambdaIAMRole.Arn
      Runtime: python3.9
      Tags:
      - Key: service
        Value: !Ref service
      - Key: stage
        Value: !Ref stage
      - Key: contact
        Value: !Ref contact
      Timeout: !Ref lambdaProcessorTimeout

  cloudTrailOrgLambdaIAMPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - s3:GetObject
          Resource: !Sub "arn:aws:s3:::${AWS::AccountId}-cloudtrail-org-bucket/*"
        - Effect: Allow
          Action:
          - firehose:PutRecord
          Resource: !Sub "arn:aws:firehose:us-west-2:${AWS::AccountId}:deliverystream/${AWS::AccountId}-cloudtrail-org-firehose"
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource: "*"
        - Effect: Allow
          Action:
          - sqs:ListQueues
          - sqs:GetQueueAttributes
          - sqs:ReceiveMessage
          - sqs:DeleteMessage
          - sqs:DeleteMessageBatch
          - sqs:ChangeMessageVisibility
          Resource: !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${AWS::AccountId}-cloudtrail-org-sqs-queue"
      ManagedPolicyName: !Sub "${AWS::AccountId}-cloudtrail-org-lambda-iam-policy"

  cloudTrailOrgLambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: "Allow"
          Principal:
            Service: "lambda.amazonaws.com"
          Action:
            - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref cloudTrailOrgLambdaIAMPolicy
      RoleName: !Sub "${AWS::AccountId}-cloudtrail-org-lambda-iam-role"
      Tags:
      - Key: service
        Value: !Ref service
      - Key: stage
        Value: !Ref stage
      - Key: contact
        Value: !Ref contact

  cloudTrailOrgLambdaEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: !Ref lambdaProcessorBatchSize
      Enabled: true
      EventSourceArn: !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${AWS::AccountId}-cloudtrail-org-sqs-queue"
      FunctionName: !GetAtt cloudTrailOrgLambdaFunction.Arn
      MaximumBatchingWindowInSeconds: !Ref lambdaProcessorBatchingWindowInSeconds


Outputs:
  cloudTrailOrgS3BucketArn:
    Value: !GetAtt cloudTrailOrgS3Bucket.Arn
  cloudTrailOrgS3BucketNotificationSQSQueueArn:
    Value: !GetAtt cloudTrailOrgS3BucketNotificationSQSQueue.Arn
  cloudTraiLOrgFirehoseArn:
    Value: !GetAtt cloudTraiLOrgFirehose.Arn
  cloudTrailOrgFirehoseIAMRoleArn:
    Value: !GetAtt cloudTrailOrgFirehoseIAMRole.Arn
  cloudTrailOrgFirehoseBacksplashBucketArn:
    Value: !GetAtt cloudTrailOrgFirehoseBacksplashBucket.Arn
  cloudTrailOrgFirehoseLogGroupArn:
    Value: !GetAtt cloudTrailOrgFirehoseLogGroup.Arn
  cloudTrailOrgLambdaFunctionArn:
    Value: !GetAtt cloudTrailOrgLambdaFunction.Arn
  cloudTrailOrgLambdaIAMRoleArn:
    Value: !GetAtt cloudTrailOrgLambdaIAMRole.Arn